<?xml version="1.0"?>
<doc>
    <assembly>
        <name>CliWrap</name>
    </assembly>
    <members>
        <member name="T:CliWrap.Buffered.BufferedCommandExtensions">
            <summary>
            Buffered execution model.
            </summary>
        </member>
        <member name="M:CliWrap.Buffered.BufferedCommandExtensions.ExecuteBufferedAsync(CliWrap.Command,System.Text.Encoding,System.Text.Encoding,System.Threading.CancellationToken,System.Threading.CancellationToken)">
            <summary>
            Executes the command asynchronously with buffering.
            Data written to the standard output and standard error streams is decoded as text
            and returned as part of the result object.
            </summary>
            <remarks>
            This method can be awaited.
            </remarks>
        </member>
        <member name="M:CliWrap.Buffered.BufferedCommandExtensions.ExecuteBufferedAsync(CliWrap.Command,System.Text.Encoding,System.Text.Encoding,System.Threading.CancellationToken)">
            <summary>
            Executes the command asynchronously with buffering.
            Data written to the standard output and standard error streams is decoded as text
            and returned as part of the result object.
            </summary>
            <remarks>
            This method can be awaited.
            </remarks>
        </member>
        <member name="M:CliWrap.Buffered.BufferedCommandExtensions.ExecuteBufferedAsync(CliWrap.Command,System.Text.Encoding,System.Threading.CancellationToken)">
            <summary>
            Executes the command asynchronously with buffering.
            Data written to the standard output and standard error streams is decoded as text
            and returned as part of the result object.
            </summary>
            <remarks>
            This method can be awaited.
            </remarks>
        </member>
        <member name="M:CliWrap.Buffered.BufferedCommandExtensions.ExecuteBufferedAsync(CliWrap.Command,System.Threading.CancellationToken)">
            <summary>
            Executes the command asynchronously with buffering.
            Data written to the standard output and standard error streams is decoded as text
            and returned as part of the result object.
            Uses <see cref="P:System.Console.OutputEncoding" /> for decoding.
            </summary>
            <remarks>
            This method can be awaited.
            </remarks>
        </member>
        <member name="T:CliWrap.Buffered.BufferedCommandResult">
            <summary>
            Result of a command execution, with buffered text data from standard output and standard error streams.
            </summary>
        </member>
        <member name="P:CliWrap.Buffered.BufferedCommandResult.StandardOutput">
            <summary>
            Standard output data produced by the underlying process.
            </summary>
        </member>
        <member name="P:CliWrap.Buffered.BufferedCommandResult.StandardError">
            <summary>
            Standard error data produced by the underlying process.
            </summary>
        </member>
        <member name="M:CliWrap.Buffered.BufferedCommandResult.#ctor(System.Int32,System.DateTimeOffset,System.DateTimeOffset,System.String,System.String)">
            <summary>
            Initializes an instance of <see cref="T:CliWrap.Buffered.BufferedCommandResult" />.
            </summary>
        </member>
        <member name="T:CliWrap.Builders.ArgumentsBuilder">
            <summary>
            Builder that helps format command line arguments into a string.
            </summary>
        </member>
        <member name="M:CliWrap.Builders.ArgumentsBuilder.Add(System.String,System.Boolean)">
            <summary>
            Adds the specified value to the list of arguments.
            </summary>
        </member>
        <member name="M:CliWrap.Builders.ArgumentsBuilder.Add(System.String)">
            <summary>
            Adds the specified value to the list of arguments.
            </summary>
        </member>
        <member name="M:CliWrap.Builders.ArgumentsBuilder.Add(System.Collections.Generic.IEnumerable{System.String},System.Boolean)">
            <summary>
            Adds the specified values to the list of arguments.
            </summary>
        </member>
        <member name="M:CliWrap.Builders.ArgumentsBuilder.Add(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Adds the specified values to the list of arguments.
            </summary>
        </member>
        <member name="M:CliWrap.Builders.ArgumentsBuilder.Add(System.IFormattable,System.IFormatProvider,System.Boolean)">
            <summary>
            Adds the specified value to the list of arguments.
            </summary>
        </member>
        <member name="M:CliWrap.Builders.ArgumentsBuilder.Add(System.IFormattable,System.Globalization.CultureInfo,System.Boolean)">
            <summary>
            Adds the specified value to the list of arguments.
            </summary>
        </member>
        <member name="M:CliWrap.Builders.ArgumentsBuilder.Add(System.IFormattable,System.Globalization.CultureInfo)">
            <summary>
            Adds the specified value to the list of arguments.
            </summary>
        </member>
        <member name="M:CliWrap.Builders.ArgumentsBuilder.Add(System.IFormattable,System.Boolean)">
            <summary>
            Adds the specified value to the list of arguments.
            The value is converted to string using invariant culture.
            </summary>
        </member>
        <member name="M:CliWrap.Builders.ArgumentsBuilder.Add(System.IFormattable)">
            <summary>
            Adds the specified value to the list of arguments.
            The value is converted to string using invariant culture.
            </summary>
        </member>
        <member name="M:CliWrap.Builders.ArgumentsBuilder.Add(System.Collections.Generic.IEnumerable{System.IFormattable},System.IFormatProvider,System.Boolean)">
            <summary>
            Adds the specified values to the list of arguments.
            </summary>
        </member>
        <member name="M:CliWrap.Builders.ArgumentsBuilder.Add(System.Collections.Generic.IEnumerable{System.IFormattable},System.Globalization.CultureInfo,System.Boolean)">
            <summary>
            Adds the specified values to the list of arguments.
            </summary>
        </member>
        <member name="M:CliWrap.Builders.ArgumentsBuilder.Add(System.Collections.Generic.IEnumerable{System.IFormattable},System.Globalization.CultureInfo)">
            <summary>
            Adds the specified values to the list of arguments.
            </summary>
        </member>
        <member name="M:CliWrap.Builders.ArgumentsBuilder.Add(System.Collections.Generic.IEnumerable{System.IFormattable},System.Boolean)">
            <summary>
            Adds the specified values to the list of arguments.
            The values are converted to string using invariant culture.
            </summary>
        </member>
        <member name="M:CliWrap.Builders.ArgumentsBuilder.Add(System.Collections.Generic.IEnumerable{System.IFormattable})">
            <summary>
            Adds the specified values to the list of arguments.
            The values are converted to string using invariant culture.
            </summary>
        </member>
        <member name="M:CliWrap.Builders.ArgumentsBuilder.Build">
            <summary>
            Builds the resulting arguments string.
            </summary>
        </member>
        <member name="T:CliWrap.Builders.CredentialsBuilder">
            <summary>
            Builder that helps configure user credentials.
            </summary>
        </member>
        <member name="M:CliWrap.Builders.CredentialsBuilder.SetDomain(System.String)">
            <summary>
            Sets the Active Directory domain used when starting the process.
            </summary>
            <remarks>
            Only supported on Windows.
            </remarks>
        </member>
        <member name="M:CliWrap.Builders.CredentialsBuilder.SetUserName(System.String)">
            <summary>
            Sets the username used when starting the process.
            </summary>
        </member>
        <member name="M:CliWrap.Builders.CredentialsBuilder.SetPassword(System.String)">
            <summary>
            Sets the password used when starting the process.
            </summary>
            <remarks>
            Only supported on Windows.
            </remarks>
        </member>
        <member name="M:CliWrap.Builders.CredentialsBuilder.LoadUserProfile(System.Boolean)">
            <summary>
            Instructs whether to load the user profile when starting the process.
            </summary>
            <remarks>
            Only supported on Windows.
            </remarks>
        </member>
        <member name="M:CliWrap.Builders.CredentialsBuilder.Build">
            <summary>
            Builds the resulting credentials.
            </summary>
        </member>
        <member name="T:CliWrap.Builders.EnvironmentVariablesBuilder">
            <summary>
            Builder that helps configure environment variables.
            </summary>
        </member>
        <member name="M:CliWrap.Builders.EnvironmentVariablesBuilder.Set(System.String,System.String)">
            <summary>
            Sets an environment variable with the specified name to the specified value.
            </summary>
        </member>
        <member name="M:CliWrap.Builders.EnvironmentVariablesBuilder.Set(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}})">
            <summary>
            Sets multiple environment variables from the specified sequence of key-value pairs.
            </summary>
        </member>
        <member name="M:CliWrap.Builders.EnvironmentVariablesBuilder.Set(System.Collections.Generic.IReadOnlyDictionary{System.String,System.String})">
            <summary>
            Sets multiple environment variables from the specified dictionary.
            </summary>
        </member>
        <member name="M:CliWrap.Builders.EnvironmentVariablesBuilder.Build">
            <summary>
            Builds the resulting environment variables.
            </summary>
        </member>
        <member name="T:CliWrap.Cli">
            <summary>
            Main entry point for creating new commands.
            </summary>
        </member>
        <member name="M:CliWrap.Cli.Wrap(System.String)">
            <summary>
            Creates a new command that targets the specified command line executable, batch file, or script.
            </summary>
        </member>
        <member name="T:CliWrap.Command">
            <summary>
            Instructions for running a process.
            </summary>
        </member>
        <member name="P:CliWrap.Command.TargetFilePath">
            <inheritdoc />
        </member>
        <member name="P:CliWrap.Command.Arguments">
            <inheritdoc />
        </member>
        <member name="P:CliWrap.Command.WorkingDirPath">
            <inheritdoc />
        </member>
        <member name="P:CliWrap.Command.Credentials">
            <inheritdoc />
        </member>
        <member name="P:CliWrap.Command.EnvironmentVariables">
            <inheritdoc />
        </member>
        <member name="P:CliWrap.Command.Validation">
            <inheritdoc />
        </member>
        <member name="P:CliWrap.Command.StandardInputPipe">
            <inheritdoc />
        </member>
        <member name="P:CliWrap.Command.StandardOutputPipe">
            <inheritdoc />
        </member>
        <member name="P:CliWrap.Command.StandardErrorPipe">
            <inheritdoc />
        </member>
        <member name="M:CliWrap.Command.#ctor(System.String,System.String,System.String,CliWrap.Credentials,System.Collections.Generic.IReadOnlyDictionary{System.String,System.String},CliWrap.CommandResultValidation,CliWrap.PipeSource,CliWrap.PipeTarget,CliWrap.PipeTarget)">
            <summary>
            Initializes an instance of <see cref="T:CliWrap.Command" />.
            </summary>
        </member>
        <member name="M:CliWrap.Command.#ctor(System.String)">
            <summary>
            Initializes an instance of <see cref="T:CliWrap.Command" />.
            </summary>
        </member>
        <member name="M:CliWrap.Command.WithArguments(System.String)">
            <summary>
            Creates a copy of this command, setting the arguments to the specified value.
            </summary>
        </member>
        <member name="M:CliWrap.Command.WithArguments(System.Collections.Generic.IEnumerable{System.String},System.Boolean)">
            <summary>
            Creates a copy of this command, setting the arguments to the value
            obtained by formatting the specified enumeration.
            </summary>
        </member>
        <member name="M:CliWrap.Command.WithArguments(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Creates a copy of this command, setting the arguments to the value
            obtained by formatting the specified enumeration.
            </summary>
        </member>
        <member name="M:CliWrap.Command.WithArguments(System.Action{CliWrap.Builders.ArgumentsBuilder})">
            <summary>
            Creates a copy of this command, setting the arguments to the value
            configured by the specified delegate.
            </summary>
        </member>
        <member name="M:CliWrap.Command.WithWorkingDirectory(System.String)">
            <summary>
            Creates a copy of this command, setting the working directory path to the specified value.
            </summary>
        </member>
        <member name="M:CliWrap.Command.WithCredentials(CliWrap.Credentials)">
            <summary>
            Creates a copy of this command, setting the user credentials to the specified value.
            </summary>
        </member>
        <member name="M:CliWrap.Command.WithCredentials(System.Action{CliWrap.Builders.CredentialsBuilder})">
            <summary>
            Creates a copy of this command, setting the user credentials to the value
            configured by the specified delegate.
            </summary>
        </member>
        <member name="M:CliWrap.Command.WithEnvironmentVariables(System.Collections.Generic.IReadOnlyDictionary{System.String,System.String})">
            <summary>
            Creates a copy of this command, setting the environment variables to the specified value.
            </summary>
        </member>
        <member name="M:CliWrap.Command.WithEnvironmentVariables(System.Action{CliWrap.Builders.EnvironmentVariablesBuilder})">
            <summary>
            Creates a copy of this command, setting the environment variables to the value
            configured by the specified delegate.
            </summary>
        </member>
        <member name="M:CliWrap.Command.WithValidation(CliWrap.CommandResultValidation)">
            <summary>
            Creates a copy of this command, setting the validation options to the specified value.
            </summary>
        </member>
        <member name="M:CliWrap.Command.WithStandardInputPipe(CliWrap.PipeSource)">
            <summary>
            Creates a copy of this command, setting the standard input pipe to the specified source.
            </summary>
        </member>
        <member name="M:CliWrap.Command.WithStandardOutputPipe(CliWrap.PipeTarget)">
            <summary>
            Creates a copy of this command, setting the standard output pipe to the specified target.
            </summary>
        </member>
        <member name="M:CliWrap.Command.WithStandardErrorPipe(CliWrap.PipeTarget)">
            <summary>
            Creates a copy of this command, setting the standard error pipe to the specified target.
            </summary>
        </member>
        <member name="M:CliWrap.Command.ToString">
            <inheritdoc />
        </member>
        <member name="M:CliWrap.Command.ExecuteAsync(System.Threading.CancellationToken,System.Threading.CancellationToken)">
            <summary>
            Executes the command asynchronously.
            </summary>
            <remarks>
            This method can be awaited.
            </remarks>
        </member>
        <member name="M:CliWrap.Command.ExecuteAsync(System.Threading.CancellationToken)">
            <summary>
            Executes the command asynchronously.
            </summary>
            <remarks>
            This method can be awaited.
            </remarks>
        </member>
        <member name="M:CliWrap.Command.op_BitwiseOr(CliWrap.Command,CliWrap.PipeTarget)">
            <summary>
            Creates a new command that pipes its standard output to the specified target.
            </summary>
        </member>
        <member name="M:CliWrap.Command.op_BitwiseOr(CliWrap.Command,System.IO.Stream)">
            <summary>
            Creates a new command that pipes its standard output to the specified stream.
            </summary>
        </member>
        <member name="M:CliWrap.Command.op_BitwiseOr(CliWrap.Command,System.Text.StringBuilder)">
            <summary>
            Creates a new command that pipes its standard output to the specified string builder.
            Uses <see cref="P:System.Console.OutputEncoding" /> for decoding.
            </summary>
        </member>
        <member name="M:CliWrap.Command.op_BitwiseOr(CliWrap.Command,System.Action{System.String})">
            <summary>
            Creates a new command that pipes its standard output line-by-line to the specified
            synchronous delegate.
            Uses <see cref="P:System.Console.OutputEncoding" /> for decoding.
            </summary>
        </member>
        <member name="M:CliWrap.Command.op_BitwiseOr(CliWrap.Command,System.Func{System.String,System.Threading.Tasks.Task})">
            <summary>
            Creates a new command that pipes its standard output line-by-line to the specified
            asynchronous delegate.
            Uses <see cref="P:System.Console.OutputEncoding" /> for decoding.
            </summary>
        </member>
        <member name="M:CliWrap.Command.op_BitwiseOr(CliWrap.Command,System.ValueTuple{CliWrap.PipeTarget,CliWrap.PipeTarget})">
            <summary>
            Creates a new command that pipes its standard output and standard error to the
            specified targets.
            </summary>
        </member>
        <member name="M:CliWrap.Command.op_BitwiseOr(CliWrap.Command,System.ValueTuple{System.IO.Stream,System.IO.Stream})">
            <summary>
            Creates a new command that pipes its standard output and standard error to the
            specified streams.
            </summary>
        </member>
        <member name="M:CliWrap.Command.op_BitwiseOr(CliWrap.Command,System.ValueTuple{System.Text.StringBuilder,System.Text.StringBuilder})">
            <summary>
            Creates a new command that pipes its standard output and standard error to the
            specified string builders.
            Uses <see cref="P:System.Console.OutputEncoding" /> for decoding.
            </summary>
        </member>
        <member name="M:CliWrap.Command.op_BitwiseOr(CliWrap.Command,System.ValueTuple{System.Action{System.String},System.Action{System.String}})">
            <summary>
            Creates a new command that pipes its standard output and standard error line-by-line
            to the specified synchronous delegates.
            Uses <see cref="P:System.Console.OutputEncoding" /> for decoding.
            </summary>
        </member>
        <member name="M:CliWrap.Command.op_BitwiseOr(CliWrap.Command,System.ValueTuple{System.Func{System.String,System.Threading.Tasks.Task},System.Func{System.String,System.Threading.Tasks.Task}})">
            <summary>
            Creates a new command that pipes its standard output and standard error line-by-line
            to the specified asynchronous delegates.
            Uses <see cref="P:System.Console.OutputEncoding" /> for decoding.
            </summary>
        </member>
        <member name="M:CliWrap.Command.op_BitwiseOr(CliWrap.PipeSource,CliWrap.Command)">
            <summary>
            Creates a new command that pipes its standard input from the specified source.
            </summary>
        </member>
        <member name="M:CliWrap.Command.op_BitwiseOr(System.IO.Stream,CliWrap.Command)">
            <summary>
            Creates a new command that pipes its standard input from the specified stream.
            </summary>
        </member>
        <member name="M:CliWrap.Command.op_BitwiseOr(System.ReadOnlyMemory{System.Byte},CliWrap.Command)">
            <summary>
            Creates a new command that pipes its standard input from the specified memory region.
            </summary>
        </member>
        <member name="M:CliWrap.Command.op_BitwiseOr(System.Byte[],CliWrap.Command)">
            <summary>
            Creates a new command that pipes its standard input from the specified byte array.
            </summary>
        </member>
        <member name="M:CliWrap.Command.op_BitwiseOr(System.String,CliWrap.Command)">
            <summary>
            Creates a new command that pipes its standard input from the specified string.
            Uses <see cref="P:System.Console.InputEncoding" /> for encoding.
            </summary>
        </member>
        <member name="M:CliWrap.Command.op_BitwiseOr(CliWrap.Command,CliWrap.Command)">
            <summary>
            Creates a new command that pipes its standard input from the standard output of the
            specified command.
            </summary>
        </member>
        <member name="T:CliWrap.CommandResult">
            <summary>
            Result of a command execution.
            </summary>
        </member>
        <member name="P:CliWrap.CommandResult.ExitCode">
            <summary>
            Exit code set by the underlying process.
            </summary>
        </member>
        <member name="P:CliWrap.CommandResult.StartTime">
            <summary>
            When the command started executing.
            </summary>
        </member>
        <member name="P:CliWrap.CommandResult.ExitTime">
            <summary>
            When the command finished executing.
            </summary>
        </member>
        <member name="P:CliWrap.CommandResult.RunTime">
            <summary>
            Total duration of the command execution.
            </summary>
        </member>
        <member name="M:CliWrap.CommandResult.#ctor(System.Int32,System.DateTimeOffset,System.DateTimeOffset)">
            <summary>
            Initializes an instance of <see cref="T:CliWrap.CommandResult" />.
            </summary>
        </member>
        <member name="T:CliWrap.CommandResultValidation">
            <summary>
            Strategy used for validating the result of a command execution.
            </summary>
        </member>
        <member name="F:CliWrap.CommandResultValidation.None">
            <summary>
            No validation.
            </summary>
        </member>
        <member name="F:CliWrap.CommandResultValidation.ZeroExitCode">
            <summary>
            Ensure that the command returned a zero exit code.
            </summary>
        </member>
        <member name="T:CliWrap.CommandTask`1">
            <summary>
            Represents an asynchronous execution of a command.
            </summary>
        </member>
        <member name="P:CliWrap.CommandTask`1.Task">
            <summary>
            Underlying task.
            </summary>
        </member>
        <member name="P:CliWrap.CommandTask`1.ProcessId">
            <summary>
            Underlying process ID.
            </summary>
        </member>
        <member name="M:CliWrap.CommandTask`1.#ctor(System.Threading.Tasks.Task{`0},System.Int32)">
            <summary>
            Initializes an instance of <see cref="T:CliWrap.CommandTask`1" />.
            </summary>
        </member>
        <member name="M:CliWrap.CommandTask`1.Select``1(System.Func{`0,``0})">
            <summary>
            Lazily maps the result of the task using the specified transform.
            </summary>
        </member>
        <member name="M:CliWrap.CommandTask`1.GetAwaiter">
            <summary>
            Gets the awaiter of the underlying task.
            Used to enable await expressions on this object.
            </summary>
        </member>
        <member name="M:CliWrap.CommandTask`1.ConfigureAwait(System.Boolean)">
            <summary>
            Configures an awaiter used to await this task.
            </summary>
        </member>
        <member name="M:CliWrap.CommandTask`1.Dispose">
            <inheritdoc />
        </member>
        <member name="M:CliWrap.CommandTask`1.op_Implicit(CliWrap.CommandTask{`0})~System.Threading.Tasks.Task{`0}">
            <summary>
            Casts a command task into a regular task.
            </summary>
        </member>
        <member name="T:CliWrap.Credentials">
            <summary>
            User credentials used for starting a process.
            </summary>
        </member>
        <member name="P:CliWrap.Credentials.Domain">
            <summary>
            Active Directory domain used when starting the process.
            </summary>
            <remarks>
            Only supported on Windows.
            </remarks>
        </member>
        <member name="P:CliWrap.Credentials.UserName">
            <summary>
            Username used when starting the process.
            </summary>
        </member>
        <member name="P:CliWrap.Credentials.Password">
            <summary>
            Password used when starting the process.
            </summary>
            <remarks>
            Only supported on Windows.
            </remarks>
        </member>
        <member name="P:CliWrap.Credentials.LoadUserProfile">
            <summary>
            Whether to load the user profile when starting the process.
            </summary>
            <remarks>
            Only supported on Windows.
            </remarks>
        </member>
        <member name="M:CliWrap.Credentials.#ctor(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Initializes an instance of <see cref="T:CliWrap.Credentials" />.
            </summary>
        </member>
        <member name="M:CliWrap.Credentials.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes an instance of <see cref="T:CliWrap.Credentials" />.
            </summary>
        </member>
        <member name="P:CliWrap.Credentials.Default">
            <summary>
            Empty credentials.
            </summary>
        </member>
        <member name="T:CliWrap.EventStream.CommandEvent">
            <summary>
            <para>
                Abstract event produced by a command.
                Use pattern matching to handle specific instances of this type.
            </para>
            <para>
                Can be either one of the following:
                <list type="bullet">
                    <item><see cref="T:CliWrap.EventStream.StartedCommandEvent" /></item>
                    <item><see cref="T:CliWrap.EventStream.StandardOutputCommandEvent" /></item>
                    <item><see cref="T:CliWrap.EventStream.StandardErrorCommandEvent" /></item>
                    <item><see cref="T:CliWrap.EventStream.ExitedCommandEvent" /></item>
                </list>
            </para>
            </summary>
        </member>
        <member name="T:CliWrap.EventStream.StartedCommandEvent">
            <summary>
            Event triggered when the command starts executing.
            May only appear once in the event stream.
            </summary>
        </member>
        <member name="P:CliWrap.EventStream.StartedCommandEvent.ProcessId">
            <summary>
            Underlying process ID.
            </summary>
        </member>
        <member name="M:CliWrap.EventStream.StartedCommandEvent.#ctor(System.Int32)">
            <summary>
            Initializes an instance of <see cref="T:CliWrap.EventStream.StartedCommandEvent" />.
            </summary>
        </member>
        <member name="M:CliWrap.EventStream.StartedCommandEvent.ToString">
            <inheritdoc />
        </member>
        <member name="T:CliWrap.EventStream.StandardOutputCommandEvent">
            <summary>
            Event triggered when the underlying process writes a line of text to the standard output stream.
            </summary>
        </member>
        <member name="P:CliWrap.EventStream.StandardOutputCommandEvent.Text">
            <summary>
            Line of text written to the standard output stream.
            </summary>
        </member>
        <member name="M:CliWrap.EventStream.StandardOutputCommandEvent.#ctor(System.String)">
            <summary>
            Initializes an instance of <see cref="T:CliWrap.EventStream.StandardOutputCommandEvent" />.
            </summary>
        </member>
        <member name="M:CliWrap.EventStream.StandardOutputCommandEvent.ToString">
            <inheritdoc />
        </member>
        <member name="T:CliWrap.EventStream.StandardErrorCommandEvent">
            <summary>
            Event triggered when the underlying process writes a line of text to the standard error stream.
            </summary>
        </member>
        <member name="P:CliWrap.EventStream.StandardErrorCommandEvent.Text">
            <summary>
            Line of text written to the standard error stream.
            </summary>
        </member>
        <member name="M:CliWrap.EventStream.StandardErrorCommandEvent.#ctor(System.String)">
            <summary>
            Initializes an instance of <see cref="T:CliWrap.EventStream.StandardErrorCommandEvent" />.
            </summary>
        </member>
        <member name="M:CliWrap.EventStream.StandardErrorCommandEvent.ToString">
            <inheritdoc />
        </member>
        <member name="T:CliWrap.EventStream.ExitedCommandEvent">
            <summary>
            Event triggered when the command finishes executing.
            May only appear once in the event stream.
            </summary>
        </member>
        <member name="P:CliWrap.EventStream.ExitedCommandEvent.ExitCode">
            <summary>
            Exit code set by the underlying process.
            </summary>
        </member>
        <member name="M:CliWrap.EventStream.ExitedCommandEvent.#ctor(System.Int32)">
            <summary>
            Initializes an instance of <see cref="T:CliWrap.EventStream.ExitedCommandEvent" />.
            </summary>
        </member>
        <member name="M:CliWrap.EventStream.ExitedCommandEvent.ToString">
            <inheritdoc />
        </member>
        <member name="T:CliWrap.EventStream.EventStreamCommandExtensions">
            <summary>
            Event stream execution model.
            </summary>
            <summary>
            Event stream execution model.
            </summary>
        </member>
        <member name="M:CliWrap.EventStream.EventStreamCommandExtensions.ListenAsync(CliWrap.Command,System.Text.Encoding,System.Text.Encoding,System.Threading.CancellationToken,System.Threading.CancellationToken)">
            <summary>
            Executes the command as a pull-based event stream.
            </summary>
            <remarks>
            Use pattern matching to handle specific instances of <see cref="T:CliWrap.EventStream.CommandEvent" />.
            </remarks>
        </member>
        <member name="M:CliWrap.EventStream.EventStreamCommandExtensions.ListenAsync(CliWrap.Command,System.Text.Encoding,System.Text.Encoding,System.Threading.CancellationToken)">
            <summary>
            Executes the command as a pull-based event stream.
            </summary>
            <remarks>
            Use pattern matching to handle specific instances of <see cref="T:CliWrap.EventStream.CommandEvent" />.
            </remarks>
        </member>
        <member name="M:CliWrap.EventStream.EventStreamCommandExtensions.ListenAsync(CliWrap.Command,System.Text.Encoding,System.Threading.CancellationToken)">
            <summary>
            Executes the command as a pull-based event stream.
            </summary>
            <remarks>
            Use pattern matching to handle specific instances of <see cref="T:CliWrap.EventStream.CommandEvent" />.
            </remarks>
        </member>
        <member name="M:CliWrap.EventStream.EventStreamCommandExtensions.ListenAsync(CliWrap.Command,System.Threading.CancellationToken)">
            <summary>
            Executes the command as a pull-based event stream.
            Uses <see cref="P:System.Console.OutputEncoding" /> for decoding.
            </summary>
            <remarks>
            Use pattern matching to handle specific instances of <see cref="T:CliWrap.EventStream.CommandEvent" />.
            </remarks>
        </member>
        <member name="M:CliWrap.EventStream.EventStreamCommandExtensions.Observe(CliWrap.Command,System.Text.Encoding,System.Text.Encoding,System.Threading.CancellationToken,System.Threading.CancellationToken)">
            <summary>
            Executes the command as a push-based event stream.
            </summary>
            <remarks>
            Use pattern matching to handle specific instances of <see cref="T:CliWrap.EventStream.CommandEvent" />.
            </remarks>
        </member>
        <member name="M:CliWrap.EventStream.EventStreamCommandExtensions.Observe(CliWrap.Command,System.Text.Encoding,System.Text.Encoding,System.Threading.CancellationToken)">
            <summary>
            Executes the command as a push-based event stream.
            </summary>
            <remarks>
            Use pattern matching to handle specific instances of <see cref="T:CliWrap.EventStream.CommandEvent" />.
            </remarks>
        </member>
        <member name="M:CliWrap.EventStream.EventStreamCommandExtensions.Observe(CliWrap.Command,System.Text.Encoding,System.Threading.CancellationToken)">
            <summary>
            Executes the command as a push-based event stream.
            </summary>
            <remarks>
            Use pattern matching to handle specific instances of <see cref="T:CliWrap.EventStream.CommandEvent" />.
            </remarks>
        </member>
        <member name="M:CliWrap.EventStream.EventStreamCommandExtensions.Observe(CliWrap.Command,System.Threading.CancellationToken)">
            <summary>
            Executes the command as a push-based event stream.
            Uses <see cref="P:System.Console.OutputEncoding" /> for decoding.
            </summary>
            <remarks>
            Use pattern matching to handle specific instances of <see cref="T:CliWrap.EventStream.CommandEvent" />.
            </remarks>
        </member>
        <member name="T:CliWrap.Exceptions.CliWrapException">
            <summary>
            Parent class for exceptions thrown by <see cref="N:CliWrap" />.
            </summary>
        </member>
        <member name="M:CliWrap.Exceptions.CliWrapException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes an instance of <see cref="T:CliWrap.Exceptions.CliWrapException" />.
            </summary>
        </member>
        <member name="M:CliWrap.Exceptions.CliWrapException.#ctor(System.String)">
            <summary>
            Initializes an instance of <see cref="T:CliWrap.Exceptions.CliWrapException" />.
            </summary>
        </member>
        <member name="T:CliWrap.Exceptions.CommandExecutionException">
            <summary>
            Exception thrown when the command fails to execute correctly.
            </summary>
        </member>
        <member name="P:CliWrap.Exceptions.CommandExecutionException.Command">
            <summary>
            Command that triggered the exception.
            </summary>
        </member>
        <member name="P:CliWrap.Exceptions.CommandExecutionException.ExitCode">
            <summary>
            Exit code returned by the process.
            </summary>
        </member>
        <member name="M:CliWrap.Exceptions.CommandExecutionException.#ctor(CliWrap.ICommandConfiguration,System.Int32,System.String,System.Exception)">
            <summary>
            Initializes an instance of <see cref="T:CliWrap.Exceptions.CommandExecutionException" />.
            </summary>
        </member>
        <member name="M:CliWrap.Exceptions.CommandExecutionException.#ctor(CliWrap.ICommandConfiguration,System.Int32,System.String)">
            <summary>
            Initializes an instance of <see cref="T:CliWrap.Exceptions.CommandExecutionException" />.
            </summary>
        </member>
        <member name="T:CliWrap.ICommandConfiguration">
            <summary>
            Instructions for running a process.
            </summary>
        </member>
        <member name="P:CliWrap.ICommandConfiguration.TargetFilePath">
            <summary>
            File path of the executable, batch file, or script, that this command runs.
            </summary>
        </member>
        <member name="P:CliWrap.ICommandConfiguration.Arguments">
            <summary>
            Command line arguments passed to the underlying process.
            </summary>
        </member>
        <member name="P:CliWrap.ICommandConfiguration.WorkingDirPath">
            <summary>
            Working directory path set for the underlying process.
            </summary>
        </member>
        <member name="P:CliWrap.ICommandConfiguration.Credentials">
            <summary>
            User credentials set for the underlying process.
            </summary>
        </member>
        <member name="P:CliWrap.ICommandConfiguration.EnvironmentVariables">
            <summary>
            Environment variables set for the underlying process.
            </summary>
        </member>
        <member name="P:CliWrap.ICommandConfiguration.Validation">
            <summary>
            Configured result validation strategy.
            </summary>
        </member>
        <member name="P:CliWrap.ICommandConfiguration.StandardInputPipe">
            <summary>
            Configured standard input pipe source.
            </summary>
        </member>
        <member name="P:CliWrap.ICommandConfiguration.StandardOutputPipe">
            <summary>
            Configured standard output pipe target.
            </summary>
        </member>
        <member name="P:CliWrap.ICommandConfiguration.StandardErrorPipe">
            <summary>
            Configured standard error pipe target.
            </summary>
        </member>
        <member name="T:CliWrap.PipeSource">
            <summary>
            Abstraction that represents an inwards-facing pipe.
            </summary>
        </member>
        <member name="M:CliWrap.PipeSource.CopyToAsync(System.IO.Stream,System.Threading.CancellationToken)">
            <summary>
            Reads the binary content pushed into the pipe and writes it to the destination stream.
            Destination stream represents the process's standard input stream.
            </summary>
        </member>
        <member name="P:CliWrap.PipeSource.Null">
            <summary>
            Pipe source that does not provide any data.
            Functionally equivalent to a null device.
            </summary>
        </member>
        <member name="M:CliWrap.PipeSource.Create(System.Func{System.IO.Stream,System.Threading.CancellationToken,System.Threading.Tasks.Task})">
            <summary>
            Creates an anonymous pipe source with the <see cref="M:CliWrap.PipeSource.CopyToAsync(System.IO.Stream,System.Threading.CancellationToken)" /> method
            implemented by the specified asynchronous delegate.
            </summary>
        </member>
        <member name="M:CliWrap.PipeSource.Create(System.Action{System.IO.Stream})">
            <summary>
            Creates an anonymous pipe source with the <see cref="M:CliWrap.PipeSource.CopyToAsync(System.IO.Stream,System.Threading.CancellationToken)" /> method
            implemented by the specified synchronous delegate.
            </summary>
        </member>
        <member name="M:CliWrap.PipeSource.FromStream(System.IO.Stream,System.Boolean)">
            <summary>
            Creates a pipe source that reads from the specified stream.
            </summary>
        </member>
        <member name="M:CliWrap.PipeSource.FromStream(System.IO.Stream)">
            <summary>
            Creates a pipe source that reads from the specified stream.
            </summary>
        </member>
        <member name="M:CliWrap.PipeSource.FromFile(System.String)">
            <summary>
            Creates a pipe source that reads from the specified file.
            </summary>
        </member>
        <member name="M:CliWrap.PipeSource.FromMemory(System.ReadOnlyMemory{System.Byte})">
            <summary>
            Creates a pipe source that reads from the specified memory region.
            </summary>
        </member>
        <member name="M:CliWrap.PipeSource.FromBytes(System.Byte[])">
            <summary>
            Creates a pipe source that reads from the specified byte array.
            </summary>
        </member>
        <member name="M:CliWrap.PipeSource.FromString(System.String,System.Text.Encoding)">
            <summary>
            Creates a pipe source that reads from the specified string.
            </summary>
        </member>
        <member name="M:CliWrap.PipeSource.FromString(System.String)">
            <summary>
            Creates a pipe source that reads from the specified string.
            Uses <see cref="P:System.Console.InputEncoding" /> for encoding.
            </summary>
        </member>
        <member name="M:CliWrap.PipeSource.FromCommand(CliWrap.Command)">
            <summary>
            Creates a pipe source that reads from the standard output of the specified command.
            </summary>
        </member>
        <member name="T:CliWrap.PipeTarget">
            <summary>
            Abstraction that represents an outwards-facing pipe.
            </summary>
        </member>
        <member name="M:CliWrap.PipeTarget.CopyFromAsync(System.IO.Stream,System.Threading.CancellationToken)">
            <summary>
            Reads the binary content from the origin stream and pushes it into the pipe.
            Origin stream represents the process's standard output or standard error stream.
            </summary>
        </member>
        <member name="P:CliWrap.PipeTarget.Null">
            <summary>
            Pipe target that discards all data.
            Functionally equivalent to a null device.
            </summary>
            <remarks>
            Using this target results in the corresponding stream (standard output or standard error)
            not being opened for the underlying process at all.
            In the vast majority of cases, this behavior should be functionally equivalent to piping
            to a null stream, but without the performance overhead of consuming and discarding unneeded data.
            This may be undesirable in certain situations — in which case it's recommended to pipe to a
            null stream explicitly using <see cref="M:CliWrap.PipeTarget.ToStream(System.IO.Stream)" /> with <see cref="F:System.IO.Stream.Null" />.
            </remarks>
        </member>
        <member name="M:CliWrap.PipeTarget.Create(System.Func{System.IO.Stream,System.Threading.CancellationToken,System.Threading.Tasks.Task})">
            <summary>
            Creates an anonymous pipe target with the <see cref="M:CliWrap.PipeTarget.CopyFromAsync(System.IO.Stream,System.Threading.CancellationToken)" /> method
            implemented by the specified asynchronous delegate.
            </summary>
        </member>
        <member name="M:CliWrap.PipeTarget.Create(System.Action{System.IO.Stream})">
            <summary>
            Creates an anonymous pipe target with the <see cref="M:CliWrap.PipeTarget.CopyFromAsync(System.IO.Stream,System.Threading.CancellationToken)" /> method
            implemented by the specified synchronous delegate.
            </summary>
        </member>
        <member name="M:CliWrap.PipeTarget.ToStream(System.IO.Stream,System.Boolean)">
            <summary>
            Creates a pipe target that writes to the specified stream.
            </summary>
        </member>
        <member name="M:CliWrap.PipeTarget.ToStream(System.IO.Stream)">
            <summary>
            Creates a pipe target that writes to the specified stream.
            </summary>
        </member>
        <member name="M:CliWrap.PipeTarget.ToFile(System.String)">
            <summary>
            Creates a pipe target that writes to the specified file.
            </summary>
        </member>
        <member name="M:CliWrap.PipeTarget.ToStringBuilder(System.Text.StringBuilder,System.Text.Encoding)">
            <summary>
            Creates a pipe target that writes to the specified string builder.
            </summary>
        </member>
        <member name="M:CliWrap.PipeTarget.ToStringBuilder(System.Text.StringBuilder)">
            <summary>
            Creates a pipe target that writes to the specified string builder.
            Uses <see cref="P:System.Console.OutputEncoding" /> for decoding.
            </summary>
        </member>
        <member name="M:CliWrap.PipeTarget.ToDelegate(System.Func{System.String,System.Threading.Tasks.Task},System.Text.Encoding)">
            <summary>
            Creates a pipe target that invokes the specified asynchronous delegate on every line written.
            </summary>
        </member>
        <member name="M:CliWrap.PipeTarget.ToDelegate(System.Func{System.String,System.Threading.Tasks.Task})">
            <summary>
            Creates a pipe target that invokes the specified asynchronous delegate on every line written.
            Uses <see cref="P:System.Console.OutputEncoding" /> for decoding.
            </summary>
        </member>
        <member name="M:CliWrap.PipeTarget.ToDelegate(System.Action{System.String},System.Text.Encoding)">
            <summary>
            Creates a pipe target that invokes the specified synchronous delegate on every line written.
            </summary>
        </member>
        <member name="M:CliWrap.PipeTarget.ToDelegate(System.Action{System.String})">
            <summary>
            Creates a pipe target that invokes the specified synchronous delegate on every line written.
            Uses <see cref="P:System.Console.OutputEncoding" /> for decoding.
            </summary>
        </member>
        <member name="M:CliWrap.PipeTarget.Merge(System.Collections.Generic.IEnumerable{CliWrap.PipeTarget})">
            <summary>
            Creates a pipe target that replicates data over multiple inner targets.
            </summary>
        </member>
        <member name="M:CliWrap.PipeTarget.Merge(CliWrap.PipeTarget[])">
            <summary>
            Creates a pipe target that replicates data over multiple inner targets.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute">
            <summary>
            Specifies that the method or property will ensure that the listed field and property members have not-null values.
            </summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute.#ctor(System.String)">
            <summary>
            Initializes the attribute with a field or property member.
            </summary>
            <param name="member">The field or property member that is promised to be not-null.</param>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute.#ctor(System.String[])">
            <summary>
            Initializes the attribute with the list of field and property members.
            </summary>
            <param name="members">The list of field and property members that are promised to be not-null.</param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute.Members">
            <summary>
            Gets field or property member names.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute">
            <summary>
            Specifies that the method or property will ensure that the listed field and property
            members have not-null values when returning with the specified return value condition.
            </summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute.#ctor(System.Boolean,System.String)">
            <summary>
            Initializes the attribute with the specified return value condition and a field or property member.
            </summary>
            <param name="returnValue">The return value condition. If the method returns this value, the associated parameter will not be null.</param>
            <param name="member">The field or property member that is promised to be not-null.</param>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute.#ctor(System.Boolean,System.String[])">
            <summary>
            Initializes the attribute with the specified return value condition and list of field and property members.
            </summary>
            <param name="returnValue">The return value condition. If the method returns this value, the associated parameter will not be null.</param>
            <param name="members">The list of field and property members that are promised to be not-null.</param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute.ReturnValue">
            <summary>
            Gets the return value condition.
            </summary>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute.Members">
            <summary>
            Gets field or property member names.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.SetsRequiredMembersAttribute">
            <summary>
            Specifies that this constructor sets all required members for the current type,
            and callers do not need to set any required members themselves.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute">
            <summary>
            Specifies the syntax used in a string.
            </summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.#ctor(System.String)">
            <summary>
            Initializes the <see cref="T:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute"/> with the identifier of the syntax used.
            </summary>
            <param name="syntax">The syntax identifier.</param>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.#ctor(System.String,System.Object[])">
            <summary>Initializes the <see cref="T:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute"/> with the identifier of the syntax used.</summary>
            <param name="syntax">The syntax identifier.</param>
            <param name="arguments">Optional arguments associated with the specific syntax employed.</param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.Syntax">
            <summary>Gets the identifier of the syntax used.</summary>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.Arguments">
            <summary>Optional arguments associated with the specific syntax employed.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.CompositeFormat">
            <summary>The syntax identifier for strings containing composite formats for string formatting.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.DateOnlyFormat">
            <summary>The syntax identifier for strings containing date format specifiers.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.DateTimeFormat">
            <summary>The syntax identifier for strings containing date and time format specifiers.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.EnumFormat">
            <summary>The syntax identifier for strings containing <see cref="T:System.Enum"/> format specifiers.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.GuidFormat">
            <summary>The syntax identifier for strings containing <see cref="T:System.Guid"/> format specifiers.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.Json">
            <summary>The syntax identifier for strings containing JavaScript Object Notation (JSON).</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.NumericFormat">
            <summary>The syntax identifier for strings containing numeric format specifiers.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.Regex">
            <summary>The syntax identifier for strings containing regular expressions.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.TimeOnlyFormat">
            <summary>The syntax identifier for strings containing time format specifiers.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.TimeSpanFormat">
            <summary>The syntax identifier for strings containing <see cref="T:System.TimeSpan"/> format specifiers.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.Uri">
            <summary>The syntax identifier for strings containing URIs.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.Xml">
            <summary>The syntax identifier for strings containing XML.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.UnscopedRefAttribute">
            <summary>
            Used to indicate a byref escapes and is not scoped.
            </summary>
            <remarks>
            <para>
            There are several cases where the C# compiler treats a <see langword="ref"/> as implicitly
            <see langword="scoped"/> - where the compiler does not allow the <see langword="ref"/> to escape the method.
            </para>
            <para>
            For example:
            <list type="number">
                <item><see langword="this"/> for <see langword="struct"/> instance methods.</item>
                <item><see langword="ref"/> parameters that refer to <see langword="ref"/> <see langword="struct"/> types.</item>
                <item><see langword="out"/> parameters.</item>
            </list>
            </para>
            <para>
            This attribute is used in those instances where the <see langword="ref"/> should be allowed to escape.
            </para>
            <para>
            Applying this attribute, in any form, has impact on consumers of the applicable API. It is necessary for
            API authors to understand the lifetime implications of applying this attribute and how it may impact their users.
            </para>
            </remarks>
        </member>
        <member name="T:System.Runtime.CompilerServices.CallerArgumentExpressionAttribute">
            <summary>
            An attribute that allows parameters to receive the expression of other parameters.
            </summary>
        </member>
        <member name="M:System.Runtime.CompilerServices.CallerArgumentExpressionAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Runtime.CompilerServices.CallerArgumentExpressionAttribute"/> class.
            </summary>
            <param name="parameterName">The condition parameter value.</param>
        </member>
        <member name="P:System.Runtime.CompilerServices.CallerArgumentExpressionAttribute.ParameterName">
            <summary>
            Gets the parameter name the expression is retrieved from.
            </summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute">
            <summary>
            Indicates that compiler support for a particular feature is required for the location where this attribute is applied.
            </summary>
        </member>
        <member name="M:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute.#ctor(System.String)">
            <summary>
            Creates a new instance of the <see cref="T:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute"/> type.
            </summary>
            <param name="featureName">The name of the feature to indicate.</param>
        </member>
        <member name="P:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute.FeatureName">
            <summary>
            The name of the compiler feature.
            </summary>
        </member>
        <member name="P:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute.IsOptional">
            <summary>
            If true, the compiler can choose to allow access to the location where this attribute is applied if it does not understand <see cref="P:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute.FeatureName"/>.
            </summary>
        </member>
        <member name="F:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute.RefStructs">
            <summary>
            The <see cref="P:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute.FeatureName"/> used for the ref structs C# feature.
            </summary>
        </member>
        <member name="F:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute.RequiredMembers">
            <summary>
            The <see cref="P:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute.FeatureName"/> used for the required members C# feature.
            </summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.InterpolatedStringHandlerArgumentAttribute">
            <summary>
            Indicates which arguments to a method involving an interpolated string handler should be passed to that handler.
            </summary>
        </member>
        <member name="M:System.Runtime.CompilerServices.InterpolatedStringHandlerArgumentAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Runtime.CompilerServices.InterpolatedStringHandlerArgumentAttribute"/> class.
            </summary>
            <param name="argument">The name of the argument that should be passed to the handler.</param>
            <remarks><see langword="null"/> may be used as the name of the receiver in an instance method.</remarks>
        </member>
        <member name="M:System.Runtime.CompilerServices.InterpolatedStringHandlerArgumentAttribute.#ctor(System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:System.Runtime.CompilerServices.InterpolatedStringHandlerArgumentAttribute"/> class.
            </summary>
            <param name="arguments">The names of the arguments that should be passed to the handler.</param>
            <remarks><see langword="null"/> may be used as the name of the receiver in an instance method.</remarks>
        </member>
        <member name="P:System.Runtime.CompilerServices.InterpolatedStringHandlerArgumentAttribute.Arguments">
            <summary>
            Gets the names of the arguments that should be passed to the handler.
            </summary>
            <remarks><see langword="null"/> may be used as the name of the receiver in an instance method.</remarks>
        </member>
        <member name="T:System.Runtime.CompilerServices.InterpolatedStringHandlerAttribute">
            <summary>
            Indicates the attributed type is to be used as an interpolated string handler.
            </summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.IsExternalInit">
            <summary>
            Reserved to be used by the compiler for tracking metadata.
            This class should not be used by developers in source code.
            </summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.ModuleInitializerAttribute">
             <summary>
             Used to indicate to the compiler that a method should be called
             in its containing module's initializer.
             </summary>
             <remarks>
             When one or more valid methods
             with this attribute are found in a compilation, the compiler will
             emit a module initializer which calls each of the attributed methods.
            
             Certain requirements are imposed on any method targeted with this attribute:
             - The method must be `static`.
             - The method must be an ordinary member method, as opposed to a property accessor, constructor, local function, etc.
             - The method must be parameterless.
             - The method must return `void`.
             - The method must not be generic or be contained in a generic type.
             - The method's effective accessibility must be `internal` or `public`.
            
             The specification for module initializers in the .NET runtime can be found here:
             https://github.com/dotnet/runtime/blob/main/docs/design/specs/Ecma-335-Augments.md#module-initializer
             </remarks>
        </member>
        <member name="T:System.Runtime.CompilerServices.RequiredMemberAttribute">
            <summary>
            Specifies that a type has required members or that a member is required.
            </summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.SkipLocalsInitAttribute">
            <summary>
            Used to indicate to the compiler that the <c>.locals init</c> flag should not be set in method headers.
            </summary>
        </member>
        <member name="M:System.Runtime.Versioning.RequiresPreviewFeaturesAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Runtime.Versioning.RequiresPreviewFeaturesAttribute"/> class.
            </summary>
        </member>
        <member name="M:System.Runtime.Versioning.RequiresPreviewFeaturesAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Runtime.Versioning.RequiresPreviewFeaturesAttribute"/> class with the specified message.
            </summary>
            <param name="message">An optional message associated with this attribute instance.</param>
        </member>
        <member name="P:System.Runtime.Versioning.RequiresPreviewFeaturesAttribute.Message">
            <summary>
            Returns the optional message associated with this attribute instance.
            </summary>
        </member>
        <member name="P:System.Runtime.Versioning.RequiresPreviewFeaturesAttribute.Url">
            <summary>
            Returns the optional URL associated with this attribute instance.
            </summary>
        </member>
    </members>
</doc>
